# vis-data v7.1.9 - Simplified Documentation

This document provides a summarized overview of the main components in vis-data: DataSet, DataView, and DataPipe.

## DataSet

### Overview
A DataSet is a flexible, key/value-based data store for JSON objects. It allows adding, updating, and removing items, and subscribing to data changes. Data can be filtered, ordered, and fields can be type-converted.

### Construction
`new vis.DataSet([data] [, options])`
- `data` (Optional): Array of initial items. Each item must have an `id`.
- `options` (Optional): Object with properties:
    - `fieldId` (String, default: "id"): Name of the field containing the item's ID.
    - `queue` (Object | Boolean, default: none): Configures queuing of data changes.
        - `delay` (Number): Milliseconds to wait before flushing the queue.
        - `max` (Number): Maximum number of entries before flushing.
    - `type` (Object, **DEPRECATED**): For field type conversion. Use DataPipe instead.

**Example:**
```javascript
const data = new vis.DataSet();
data.add([
  {id: 1, text: 'item 1', date: new Date(2013, 6, 20)},
  {id: 2, text: 'item 2', date: '2013-06-23'}
]);
```

### Key Methods
- `add(data [, senderId])`: Adds item(s). Returns array of added IDs. Throws error if ID exists.
  - `data`: Single item object or array of items.
- `update(data [, senderId])`: Updates item(s); creates if non-existent (shallow merge). Returns array of updated/added IDs.
  - `data`: Single item object or array of items.
- `updateOnly(data [, senderId])`: Updates existing item(s) (deep merge). Throws error if item doesn't exist. Returns array of updated IDs.
  - `data`: Single item object or array of items.
- `remove(id | ids | item | items [, senderId])`: Removes item(s) by ID(s) or item object(s). Returns array of removed IDs.
- `clear([senderId])`: Removes all items. Returns array of removed IDs.
- `get([id | ids] [, options])`: Retrieves item(s).
    - No arguments: returns all items as an Array.
    - `id`: returns a single item or `null`.
    - `ids` (Array): returns an Array of items (or `null` for non-existent ones).
    - `options`: See Data Selection.
- `getIds([options])`: Returns an array of IDs.
- `forEach(callback [, options])`: Executes `callback(item, id)` for each item.
- `map(callback [, options])`: Executes `callback(item, id)` for each item and returns an array of results.
- `on(event, callback)`: Subscribes to an event.
- `off(event, callback)`: Unsubscribes from an event.
- `setOptions(options)`: Sets options for the DataSet (e.g., queueing).
- `flush()`: Flushes queued changes if queueing is enabled.
- `distinct(field)`: Returns an array of distinct values for a given field.
- `max(field)`: Returns the item with the maximum numeric value for a field.
- `min(field)`: Returns the item with the minimum numeric value for a field.

### Properties
- `length` (Number): The number of items in the DataSet.

### Data Items
- Must be JSON objects.
- Must have a unique `id` field (by default, configurable via `fieldId`).

### Event Handling
- `on(event, callback)`: `callback(event, properties, senderId)`
    - `event` (String): 'add', 'update', 'remove', or '*'.
    - `properties` (Object):
        - For 'add', 'update', 'remove': `{items: [Array of affected IDs]}`.
        - 'update' also has `{data: [Array of changed props], oldData: [Array of old item data]}`.
        - 'remove' also has `{oldData: [Array of old item data]}`.
    - `senderId` (any): Optional ID passed by the method that triggered the event.

### Data Selection Options (for `get`, `forEach`, `map`)
- `filter` (Function): `function(item) { return boolean; }`.
- `order` (String | Function): Field name to sort by, or a custom sort function `(a, b) => number`.
- `fields` (Array | Object): Array of field names to include, or an object mapping `{'newName': 'oldName'}`.
- `type` (Object): `{ fieldName: 'TypeName' }` for converting field types. Supported types:
    - `Boolean`, `Number`, `String`
    - `Date` (parses numbers, strings, Moment objects)
    - `Moment` (parses numbers, strings, Date objects)
    - `ISODate` (outputs ISO string)
    - `ASPDate` (outputs ASP.NET date string)
- `returnType` (String, for `get` only): `'Array'` (default) or `'Object'` (items keyed by ID).

## DataView

### Overview
A DataView provides a filtered and/or formatted live view of a DataSet. Changes in the underlying DataSet are reflected in the DataView.

### Construction
`new vis.DataView(dataset [, options])`
- `dataset` (DataSet | DataView): The source data.
- `options` (Object):
    - `filter` (Function): `function(item) { return boolean; }`.
    - `fields` (Array | Object): See DataSet Data Selection.
    - `type` (Object, **DEPRECATED**): See DataSet Data Selection. Use DataPipe for conversions.

**Example:**
```javascript
const data = new vis.DataSet([{id: 1, group: 1}, {id: 2, group: 2}]);
const view = new vis.DataView(data, {
  filter: function (item) { return item.group === 1; }
});
```

### Key Methods
- `get([id | ids] [, options])`: Retrieves item(s) from the view. Similar to `DataSet.get()`.
- `getIds([options])`: Returns an array of IDs present in the view.
- `on(event, callback)`: Subscribes to an event on the view.
- `off(event, callback)`: Unsubscribes from an event.
- `refresh()`: Manually refreshes the filter results. Useful if the filter function depends on external variables.
- `setData(dataset)`: Connects the DataView to a new DataSet or DataView.
- `getDataSet()`: Returns the underlying DataSet.

### Properties
- `length` (Number): The number of items in the DataView.

### Event Handling
- Same as DataSet (`add`, `update`, `remove`, `*`). Events are triggered based on items passing the view's filter.

## DataPipe

### Overview
A DataPipe connects a source DataSet/DataView to a target DataSet, allowing items to be transformed (filtered, mapped) before being piped into the target.

### Construction
```javascript
const pipe = createNewDataPipeFrom(sourceDataSet)
  .filter(item => item.enabled === true)
  .map(item => ({ /* new item structure */ }))
  .flatMap(item => [/* zero or more new items */])
  .to(targetDataSet);
```
- `sourceDataSet`: The source DataSet or DataView.
- `targetDataSet`: The target DataSet.
- `.filter(callback)`: `callback(item) => boolean`. Filters items.
- `.map(callback)`: `callback(item) => newItem`. Transforms an item into one new item.
- `.flatMap(callback)`: `callback(item) => arrayOfNewItems`. Transforms an item into zero or more new items.
- Transformations are applied in the order they are defined.

**Example:**
```javascript
const appDS = new vis.DataSet([{id: 1, appLabel: "App Item 1", visLabel: "Vis Item 1"}]);
const visDS = new vis.DataSet();

const pipe = createNewDataPipeFrom(appDS)
  .map(item => ({ id: item.id, label: item.visLabel }))
  .to(visDS);
```

### Key Methods
- `all()`: Sends all current data from source through the pipe. Returns `this`.
- `start()`: Starts observing changes in the source and pipes them. Returns `this`.
- `stop()`: Stops observing changes. Returns `this`.

### Type Coercion Example (using DataPipe)
```javascript
// Assuming 'convert' function from docs/data/datapipe.html
const rawDS = new vis.DataSet([{ id: 7, label: 4, date: "2017-09-04" }]);
const coercedDS = new vis.DataSet();
const types = { id: "string", label: "string", date: "Date" };

const pipe = createNewDataPipeFrom(rawDS)
  .map(item =>
    Object.keys(item).reduce((acc, key) => {
      acc[key] = convert(item[key], types[key]);
      return acc;
    }, {})
  )
  .to(coercedDS);

pipe.all().start();
